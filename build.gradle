buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

repositories {
    mavenLocal()
//    maven {
//        name = "CoFH Maven"
//        url = "http://maven.covers1624.net"
//    }
    maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = 'CC: Tweaked'
        url = 'https://squiddev.cc/maven/'
    }

//    maven {
//        name = "OpenComputers"
//        url = "http://maven.cil.li/"
//    }
//    maven {
//        name = "ComputerCraft"
//        url = "http://cc.crzd.me/maven"
//    }
//    maven {  currently down
//        name = "hwyla"
//        url = 'http://tehnut.info/maven/'
//    }
//    maven {
//        name = "hwyla-temp"
//        url = "https://github.com/TehNut/temporary-maven-thing/tree/master/maven"
//    }
    flatDir {
        dir 'libs/'
    }
    maven { // TOP
        name = "tterrag maven"
        url = "http://maven.tterrag.com/"
    }
    maven {
        name = 'BlameJared - Crafttweaker/Patchouli/Botania'
        url = 'http://maven.blamejared.com/'
    }
    maven {
        name = 'Curios'
        url = "https://maven.theillusivec4.top/"
    }
//    maven {
//        name = "K-4u Mod maven"
//        url = "https://modmaven.k-4u.nl/"
//    }
//    maven {
//        name = "ic2"
//        url = "http://maven.ic2.player.to/"
//    }
//    maven {
//        name = "Curseforge"
//        url = "https://minecraft.curseforge.com/api/maven/"
//    }
//    maven { // Albedo Lights
//        url = 'https://repo.elytradev.com/'
//    }
//    maven { // Baubles
//        name = "thiakil"
//        url = "http://maven.thiakil.com"
//    }
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

version = "${mc_version}-${mod_version_massive}.${mod_version_major}.${mod_version_minor}"
group = "me.desht.pneumaticcraft"
archivesBaseName = "pneumaticcraft-repressurized"

if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-CUSTOM"
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    manifest {
        attributes([
            'FMLAT': 'accesstransformer.cfg',
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "desht",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"desht",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task apiJar(type: Jar) {
    classifier = 'api'
    from(sourceSets.main.output) {
        include "me/desht/pneumaticcraft/api/**"
    }
}

task("uploadJars", dependsOn:"reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                }
            }
        }
    }
}

artifacts {
    archives sourcesJar
    archives apiJar
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client = {
            // recommended logging data for a userdev environment
//            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.markers': 'CONFIG'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            ideaModule '${project.name}.main'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CONFIG'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            ideaModule '${project.name}.main'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            mods {
                pneumaticcraft {
                    source sourceSets.main
                }
            }
            args '--mod', 'pneumaticcraft', '--all', '--output', file('src/generated/resources/')
            environment 'target', 'fmluserdevdata'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtime fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
    compileOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.15:${top_version}:api")
    runtime fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.15:${top_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.15.2:${jei_version}:api")
    runtime fg.deobf("mezz.jei:jei-1.15.2:${jei_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios:${curios_version}:api")
    runtime fg.deobf("top.theillusivec4.curios:curios:${curios_version}")
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    runtime fg.deobf("vazkii.botania:Botania:${botania_version}")
    compile fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compile fg.deobf("org.squiddev:cc-tweaked-1.15.2:${cc_tweaked_version}")
//    compileOnly "cofh:RedstoneFlux:1.12-${redstone_flux_version}:universal"
//    compileOnly("mekanism:Mekanism:${mekanism_version}:api") { exclude group: "mezz.jei" }
//    compileOnly "cofh:CoFHCore:1.12.2-${cofhcore_version}:deobf"
//    compileOnly "li.cil.oc:OpenComputers:MC1.12.2-${oc_version}:api"
//    compileOnly "dan200.computercraft:ComputerCraft:${computercraft_version}"
//    compileOnly "CraftTweaker2:CraftTweaker2-API:${crafttweaker_version}"
//    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.14.4:${crafttweaker_version}")
//    compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crafttweaker_version}"
//    compileOnly "igwmod:IGW-Mod-1.12.2:${igwmod_version}:universal"  // using universal instead of userdev for now
//    compileOnly "net.industrial-craft:industrialcraft-2:2.8.27-ex112:api"
//    compileOnly "thaumcraft:Thaumcraft:${thaumcraft_version}"
//    compileOnly "team.chisel.ctm:CTM:${ctm_version}:api"
//    compileOnly("appeng:appliedenergistics2:${ae2_version}:api")
//    //compileOnly "elucent:albedo:${albedo_version}"
//    compileOnly "blusunrize:ImmersiveEngineering:${immersive_engineering_version}"
//    compileOnly "com.azanor.baubles:Baubles:${baubles_version}"
//    compileOnly "com.github.glitchfiend.biomesoplenty:ToughAsNails:${tan_version}:universal"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

//idea { module { inheritOutputDirs = true } }

